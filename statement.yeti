
module statement;

typedef node = URI string | Blank number | Literal { value is string, type is string };

typedef stmt = {
   s is URI string | Blank number,
   p is URI string,
   o is node,
};

statement s p o is 'a -> 'b -> 'c -> stmt = { s, p, o };

subject s is stmt -> 'a = s.s;
predicate s is stmt -> 'a = s.p;
object s is stmt -> 'a = s.o;

linearise s is stmt -> array<node> = array [s.s, s.p, s.o];

typedef ix = hash<node, hash<node, hash<node, ()>>>;

emptyIndex () is () -> ix = [:];

contains index st is ix -> stmt -> boolean =
    st.s in index and st.p in index[st.s] and st.o in index[st.s][st.p];

{
    statement,
    subject, predicate, object,
    linearise,
    emptyIndex,
    contains
}

