module hashtree;

typedef hashtree = hash<'a, Sub 'b | Ends ()>;

empty () = [:];

addList tree lst is hashtree -> list<'a> -> boolean = 
    case lst of
    [leaf]:
        if leaf in tree then 
            case tree[leaf] of
                Sub _: false;
                Ends (): true;
            esac
        else
            tree[leaf] := Ends ();
            true;
        fi;
    node::rest:
        if not node in tree then 
            tree[node] := Sub [:]
        fi;
        case tree[node] of 
            Sub subtree: addList subtree rest;
            Ends (): false;
        esac;
    _:  false; 
    esac;

exactMatch tree lst is hashtree -> list<'a> -> boolean =
    case lst of
    node::rest:
        if not node in tree then false
        else
            case tree[node] of
                Sub sub: exactMatch sub rest;
                Ends (): empty? rest;
            esac
        fi;
    _: false;
    esac;

enumerate tree is hashtree -> list<'a> =
    concat
       (map do k:
            case tree[k] of
            Sub sub: map do t: k::t done (enumerate sub);
                  _: [[k]];
            esac
        done (keys tree));

{ empty, addList, exactMatch, enumerate }

