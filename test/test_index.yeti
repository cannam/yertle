/*
    Yertle
    RDF/Turtle parser module

    Copyright (c) 2013-2014 Chris Cannam
    Copyright (c) 2013-2014 Queen Mary, University of London
  
    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use, copy,
    modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR
    ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
    CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

    Except as contained in this notice, the names of the Centre for
    Digital Music; Queen Mary, University of London; and Chris Cannam
    shall not be used in advertising or otherwise to promote the sale,
    use or other dealings in this Software without prior written
    authorization.
*/

module test.test_index;

{ compare, compareUnordered } = load test.test;

{ newIndex, add, remove, enumerate, contains, match, chooseIndex } = load yertle.index;

orderFor name =
    case name of
    "spo": [ (.s), (.p), (.o) ];
    "pos": [ (.p), (.o), (.s) ];
    "ops": [ (.o), (.p), (.s) ];
    "sop": [ (.s), (.o), (.p) ];
    "pso": [ (.p), (.s), (.o) ];
    "osp": [ (.o), (.s), (.p) ];
        _: throw new Exception ("Unsupported index name \(name) in orderFor");
    esac;

patternOrderFor name =
    case name of
    "spo": [ (.s), (.p), (.o) ];
    "pos": [ (.p), (.o), (.s) ];
    "ops": [ (.o), (.p), (.s) ];
    "sop": [ (.s), (.o), (.p) ];
    "pso": [ (.p), (.s), (.o) ];
    "osp": [ (.o), (.s), (.p) ];
        _: throw new Exception ("Unsupported index name \(name) in patternOrderFor");
    esac;

newIndexFor name =
    newIndex (orderFor name) (patternOrderFor name);

triple a b c = { s = IRI a, p = IRI b, o = IRI c };
pattern a b c = { s = a, p = b, o = c };

testTriple n =
    case n of
    "aaa": triple "fred" "loves" "cheese";
    "aab": triple "fred" "loves" "fruit";
    "abc": triple "fred" "hates" "vinegar";
    "bba": triple "jodie" "hates" "cheese";
    "bca": triple "jodie" "tolerates" "fred";
    _: throw new Exception ("Unsupported pattern \(n) in testTriple");
    esac;

testWildcard n =
    case n of
    "***": pattern (Wildcard ()) (Wildcard ()) (Wildcard ());
    "aaa": pattern (Known (IRI "fred")) (Known (IRI ("loves"))) (Known (IRI ("cheese")));
    "aa*": pattern (Known (IRI "fred")) (Known (IRI ("loves"))) (Wildcard ());
    "a**": pattern (Known (IRI "fred")) (Wildcard ()) (Wildcard ());
    "*a*": pattern (Wildcard ()) (Known (IRI "loves")) (Wildcard ());
    "a*a": pattern (Known (IRI "fred")) (Wildcard ()) (Known (IRI "cheese"));
    "**a": pattern (Wildcard ()) (Wildcard ()) (Known (IRI "cheese"));
    _: throw new Exception ("Unsupported wildcard pattern \(n) in testWildcard");
    esac;

indexNames = [ "spo", "pos", "ops", "sop", "pso", "osp" ];

perIndex name =
[

"\(name)-empty": \(
    compareUnordered (enumerate (newIndexFor name)) [];
),

"\(name)-simple": \(
    h = newIndexFor name;
    add h (testTriple "aaa") and
       compareUnordered (enumerate h) [testTriple "aaa"];
),

"\(name)-duplicate": \(
    h = newIndexFor name;
    add h (testTriple "aaa") and
       add h (testTriple "aaa") and
       compareUnordered (enumerate h) [testTriple "aaa"];
),

"\(name)-common": \(
    h = newIndexFor name;
    add h (testTriple "aaa") and
       add h (testTriple "aab") and
       compareUnordered (enumerate h) [testTriple "aaa",testTriple "aab"];
),

"\(name)-diverging": \(
    h = newIndexFor name;
    add h (testTriple "aaa") and
       add h (testTriple "aab") and
       add h (testTriple "abc") and
       add h (testTriple "bba") and
       compareUnordered (enumerate h)
           [(testTriple "aaa"),
            (testTriple "aab"),
            (testTriple "abc"),
            (testTriple "bba")];
),

"\(name)-contains": \(
    h = newIndexFor name;
    add h (testTriple "aaa") and
       add h (testTriple "aab") and
       add h (testTriple "abc") and
       add h (testTriple "bba") and
       contains h (testTriple "aaa") and
       contains h (testTriple "aab") and
       contains h (testTriple "abc") and
       contains h (testTriple "bba") and
       not contains h (testTriple "bca")
),

"\(name)-remove": \(
    h = newIndexFor name;
    add h (testTriple "aaa") and
       add h (testTriple "aab") and
       add h (testTriple "abc") and
       add h (testTriple "bba") and
       contains h (testTriple "aaa") and
       remove h (testTriple "aaa") and
       not contains h (testTriple "aaa") and // not there after removing
       not remove h (testTriple "aaa") and // and can't remove again
       remove h (testTriple "bba") and
       not remove h (testTriple "bca")
),

"\(name)-match": \(
    h = newIndexFor name;
    add h (testTriple "aaa") and
       add h (testTriple "aab") and
       add h (testTriple "abc") and
       add h (testTriple "bba") and
       compareUnordered (enumerate h) (match h (testWildcard "***")) and
       compareUnordered [testTriple "aaa", testTriple "bba"]
           (match h (testWildcard "**a"))
),

];

testIndexFor ixs patstr ixstrs =
   (ix = chooseIndex ixs (testWildcard patstr);
    contains? ix (map do n: newIndexFor n done ixstrs) or
       (println "** for \(testWildcard patstr)\n   expected: one of \(ixstrs)\n   obtained: \(ix.order)"; false));

discriminatory =
[

"chooseIndexFromAll": \(
    ixs = map do n: newIndexFor n done indexNames;
    testIndexFor ixs "aa*" ["spo","pso"] and
        testIndexFor ixs "a**" ["spo","sop"] and
        testIndexFor ixs "aaa" indexNames and
        testIndexFor ixs "a*a" ["sop","osp"] and
        testIndexFor ixs "***" indexNames and
        testIndexFor ixs "*a*" ["pso","pos"]
),

"chooseIndexFromSet": \(
    ixs = map do n: newIndexFor n done ["spo","pos","ops"];
    testIndexFor ixs "aa*" ["spo"] and
        testIndexFor ixs "a**" ["spo"] and
        testIndexFor ixs "aaa" ["spo","pos","ops"] and
        testIndexFor ixs "a*a" ["ops", "spo"] and
        testIndexFor ixs "***" ["spo","pos","ops"] and
        testIndexFor ixs "*a*" ["pos"]
),

];

all = [:];

for (concat [map do n: perIndex n done indexNames,
             [discriminatory]],) do h:
    for (keys h) do k: all[k] := h[k] done
done;

all is hash<string, () -> boolean>;

