
module test.test;

assert truth explanation =
    if truth then
        true;
    else
        println "** assertion failed: \(explanation)";
        false;
    fi;

compare obtained expected =
    if obtained == expected then
        true;
    else
        println "** expected: \(expected)\n   obtained: \(obtained)";
        false;
    fi;

// unordered compare
cmp a b = hash a == hash b;

// just so as to print out the discrepancy nicely if test fails
compareUnordered a b = if cmp a b then true else compare a b fi;

select f = fold do r x: if f x then x::r else r fi done [];

failedTests testHash =
    select (!= "")
       (mapHash do name f:
            if f () then "" else
                quoted = "\"\(name)\"";
                println "Test \(quoted) failed";
                quoted;
            fi 
        done testHash);
        
runTests group testHash =
   (failed = failedTests testHash;
    good = (length testHash - length failed);
    bad = length failed;
    println "\(group): \(good)/\(good+bad) tests passed";
    if not empty? failed then
        println "\(group): Failed tests [\(bad)]: \(strJoin ' ' failed)";
    fi;
    bad);

{
    assert, compare, compareUnordered, failedTests, runTests
}

