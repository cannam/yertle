/*
    Yertle
    RDF collections module

    Copyright (c) 2013 Chris Cannam
    Copyright (c) 2013 Queen Mary, University of London
  
    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use, copy,
    modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR
    ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
    CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

    Except as contained in this notice, the names of the Centre for
    Digital Music; Queen Mary, University of London; and Chris Cannam
    shall not be used in advertising or otherwise to promote the sale,
    use or other dealings in this Software without prior written
    authorization.
*/

module yertle.collection;

load yertle.types;

{ newBlankNode } = load yertle.blank;

/// Return true if the given node looks like a collection node (i.e. a
/// metanode, a node with rdf:first and rdf:next property).
isCollectionNode store node =
    not (empty? (store.match { s = Known node, p = Known rdfRestIRI, o = Wildcard () }));

/// Given any collection node, and the store that contains it, return
/// the first collection node (i.e. metanode, node with rdf:first and
/// rdf:next property) of that collection. This assumes the collection
/// is well-formed and may return spurious results if it is not
startOfCollection store node =
    case store.match { s = Wildcard (), p = Known rdfRestIRI, o = Known node } of
    prev::others: startOfCollection store prev.s;
    _: node;
    esac;

/// Given a collection node, return all rdf:first and rdf:rest triples
/// that comprise the collection (in collection order).
triplesOfCollection store node =
   (triples' store first acc =
        if first == rdfNilIRI then acc
        else
            here = store.match { s = Known first, p = Known rdfFirstIRI, o = Wildcard () };
            rest = store.match { s = Known first, p = Known rdfRestIRI, o = Wildcard () };
            if rest == [] then
                if here == [] then acc
                else acc ++ [head here]
                fi
            else
                if here == [] then
                    triples' store (head rest).o (acc ++ [head rest])
                else
                    triples' store (head rest).o (acc ++ [head here, head rest])
                fi
            fi
        fi;
     triples' store (startOfCollection store node) []);
        

/// Given a collection node, and the store that contains it, return
/// all nodes contained in that collection in order.
nodesInCollection store node =
   (collect' store first = 
        if first == rdfNilIRI then []
        else
            here = store.match { s = Known first, p = Known rdfFirstIRI, o = Wildcard () };
            rest = store.match { s = Known first, p = Known rdfRestIRI, o = Wildcard () };
            if rest == [] then
                if here == [] then []
                else [(head here).o]
                fi
            else
                if here == [] then collect' store (head rest).o
                else (head here).o :. \(collect' store (head rest).o)
                fi
            fi
        fi;
     collect' store (startOfCollection store node));

/// Given a list of nodes, return a list of triples comprising the RDF
/// collection of those nodes
makeCollection nodes =
   (makeColl' link nodes =
        case nodes of
        n::nn:
            { s = link, p = rdfFirstIRI, o = n } :.
                if empty? nn then
                  \( [{ s = link, p = rdfRestIRI, o = rdfNilIRI }] )
                else
                  \(o = newBlankNode ();
                    { s = link, p = rdfRestIRI, o }::(makeColl' o nn))
                fi;
        _: [];
        esac;
    makeColl' (newBlankNode ()) nodes);
        
{
   isCollectionNode,
   startOfCollection,
   triplesOfCollection,
   nodesInCollection,
   makeCollection
}

