/*
    Yertle
    RDF/Turtle serialiser module

    Copyright (c) 2013 Chris Cannam
    Copyright (c) 2013 Queen Mary, University of London
  
    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use, copy,
    modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR
    ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
    CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

    Except as contained in this notice, the names of the Centre for
    Digital Music; Queen Mary, University of London; and Chris Cannam
    shall not be used in advertising or otherwise to promote the sale,
    use or other dealings in this Software without prior written
    authorization.
*/

module yertle.write;

store = load yertle.store;

load yertle.types;

import java.lang: Character;

asciiEncode text =
   (encode c = 
        case c of 
        "\t": "\\t";
        "\n": "\\n";
        "\r": "\\r";
        "\"": "\\\"";
        "\\": "\\\\";
           _:
           (s = Integer#toHexString(Character#codePointAt(c is string, 0));
            u = if (strLength s) < 5 then "u" else "U" fi;
            n = if (strLength s) < 5 then 4 else 8 fi;
            "\\\(u)" ^ (strPad "0" (n - strLength s) "") ^ (strUpper s))
        esac;
    strJoin ""
       (map
        \case of
         Ascii t: t;
         NotAscii [c]: encode c;
         _: ""
         esac (matchAll "[^\\x20-\\x21\\x23-\\x5b\\x5d-\\x7e]"
                   NotAscii Ascii text))
    );

percentEncode text =
    // encoding only chars that are ASCII but not legal unescaped in
    // IRIs in Turtle
   (encode c =
       (s = Integer#toHexString(Character#codePointAt(c is string, 0));
        "%" ^ if (strLength s < 2) then "0" ^ s else s fi);
    strJoin ""
       (map
        \case of
         Legal t: t;
         Illegal [c]: encode c;
         _: ""
         esac (matchAll "[\\x00-\\x20<>\"{}|^`\\\\%]"
                   Illegal Legal text));
    );

iriEncode = asciiEncode . percentEncode;

writeContextFreeNode handle node =
    case node of
    IRI u:
        handle.write "<\(iriEncode u)>";
    Blank b:
        handle.write "_:blank\(b)";
    Literal l:
       (handle.write "\"\(asciiEncode l.value)\"";
        if l.language != "" then
            handle.write "@\(l.language)";
        elif l.type != "" then
            handle.write "^^";
            writeContextFreeNode handle (IRI l.type);
        fi)
    esac;

writeNTriple handle triple = // no state needed for NTriples
    for [ (.s), (.p), (.o) ] do sel:
        writeContextFreeNode handle (sel triple);
        handle.write " ";
    done;

hasBlankSubject t = case t.s of Blank _: true; IRI _: false esac;
hasBlankObject t = case t.o of Blank _: true; IRI _: false; Literal _: false esac;

writeAbbreviatedNode handle state node =
    case node of
    IRI u:
        abbr = store.abbreviate state.store node;
        if abbr == u then
            handle.write "<\(iriEncode u)>";
        else
            handle.write "\(iriEncode abbr)";
        fi;
    Blank b:
        handle.write "_:blank\(b)";
    Literal l:
        if l.language != "" then
            handle.write "\"\(asciiEncode l.value)\"@\(l.language)";
        elif l.type != "" then
            handle.write "\"\(asciiEncode l.value)\"^^";
            writeAbbreviatedNode handle state (IRI l.type);
        else
            handle.write "\"\(asciiEncode l.value)\"";
        fi;
    esac;

var writeTurtleTriples' handle state triples = ();

writeAnonObject handle state triple =
   (handle.write "[ ";
    anonTriples = store.match state.store 
        { s = Known triple.o, p = Wildcard (), o = Wildcard () };
    writeTurtleTriples' handle 
        (state with { subject = Some triple.o, predicate = None () })
        anonTriples;
    handle.write "] ");

writeUnterminated handle state selectors anonObject triple =
   (handle.write (strPad " " state.indent "");
    nSelectors =
        if anonObject then (length selectors) - 1
        else length selectors
        fi;
    for (take nSelectors selectors) do sel:
        writeAbbreviatedNode handle state (sel triple);
        handle.write " ";
    done;
    if anonObject then
        writeAnonObject handle state triple
    fi);

isBlankObjectUnique state triple =
    empty?
       (filter (!= triple)
           (store.match state.store 
                { s = Wildcard (), p = Wildcard (), o = Known triple.o }));

writeUnterminatedTriple handle state triple =
    writeUnterminated handle state [ (.s), (.p), (.o) ] triple;

writeTurtleTriple handle state triple =
   (anonObject = (hasBlankObject triple and isBlankObjectUnique state triple);
    case state.subject of
    None (): writeUnterminatedTriple handle state anonObject triple;
    Some sn:
        if sn == triple.s then
            case state.predicate of
            None (): 
                // first node in bnode [] syntax
                writeUnterminated handle 
                    (state with { indent = 0 }) [ (.p), (.o) ] anonObject triple;
            Some pn:
                if pn == triple.p then
                    handle.write ",\n";
                    writeUnterminated handle
                        (state with { indent = 8 }) [ (.o) ] anonObject triple;
                else
                    handle.write ";\n";
                    writeUnterminated handle 
                        (state with { indent = 4 }) [ (.p), (.o) ] anonObject triple;
                fi;
            esac;
        else
            handle.write ".\n\n";
            writeUnterminatedTriple handle state anonObject triple;
        fi
    esac;
    state with { subject = Some triple.s, predicate = Some triple.p });

writeTurtleTripleMaybe handle state triple =
    if not state.written[triple] then
        state.written[triple] := true;
        writeTurtleTriple handle state triple;
    else
        state
    fi;

writePrefixes handle st =
    for (store.prefixes st) do pfx:
        case store.expand st (pfx ^ ":") of
        IRI iri: 
            handle.write "@prefix \(pfx): <\(iri)> .\n"
        esac
    done;

writeNTriplesToHandle handle st =
    for (store.enumerate st) do t:
        writeNTriple handle t;
        handle.write ".\n";
    done;

writeTurtleTriples handle state triples =
   \() (fold (writeTurtleTripleMaybe handle) state triples);

writeTurtleTriples' := writeTurtleTriples;

sortByIri = sortBy
    do t1 t2:
        case t1.s of
        IRI i1:
            case t2.s of
            IRI i2: i1 < i2;
             _: true;
            esac;
         _: false;
        esac;
    done;

writeTurtleToHandle handle st =
   (writePrefixes handle st;
    handle.write "\n";
    tt = store.enumerate st;
    written = mapIntoHash id \(false) tt;
    ordered = // iri-subject triples first, then blank-subject triples
        sortByIri (filter do t: not hasBlankSubject t done tt)
        ++
        filter hasBlankSubject tt;
    writeTurtleTriples handle {
        subject = None (),
        predicate = None (),
        indent = 0,
        store = st,
        written
    } ordered;
    if not (empty? ordered) then
        handle.write ".";
    fi;
    handle.write "\n");

{ writeNTriplesToHandle, writeTurtleToHandle }
