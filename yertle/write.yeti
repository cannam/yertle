/*
    Yertle
    RDF/Turtle serialiser module

    Copyright (c) 2013 Chris Cannam
    Copyright (c) 2013 Queen Mary, University of London
  
    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use, copy,
    modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR
    ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
    CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

    Except as contained in this notice, the names of the Centre for
    Digital Music; Queen Mary, University of London; and Chris Cannam
    shall not be used in advertising or otherwise to promote the sale,
    use or other dealings in this Software without prior written
    authorization.
*/

module yertle.write;

load yertle.types;

import java.lang: Character;

asciiMatcher = matchAll "[^\\x20-\\x21\\x23-\\x5b\\x5d-\\x7e]" NotAscii Ascii;
percentMatcher = matchAll "[\\x00-\\x20<>\"{}|^`\\\\%]" Illegal Legal;

asciiEncode text =
   (encode c = 
        case c of 
        "\t": "\\t";
        "\n": "\\n";
        "\r": "\\r";
        "\"": "\\\"";
        "\\": "\\\\";
           _:
           (s = Integer#toHexString(Character#codePointAt(c is string, 0));
            u = if (strLength s) < 5 then "u" else "U" fi;
            n = if (strLength s) < 5 then 4 else 8 fi;
            "\\\(u)" ^ (strPad "0" (n - strLength s) "") ^ (strUpper s))
        esac;
    strJoin ""
       (map
        \case of
         Ascii t: t;
         NotAscii [c]: encode c;
         _: ""
         esac (asciiMatcher text))
    );

percentEncode text =
    // encoding only chars that are ASCII but not legal unescaped in
    // IRIs in Turtle
   (encode c =
       (s = Integer#toHexString(Character#codePointAt(c is string, 0));
        "%" ^ if (strLength s < 2) then "0" ^ s else s fi);
    strJoin ""
       (map
        \case of
         Legal t: t;
         Illegal [c]: encode c;
         _: ""
         esac (percentMatcher text));
    );

iriEncode = asciiEncode . percentEncode;

writeContextFreeNode handle node =
    case node of
    IRI u:
        handle.write "<\(iriEncode u)>";
    Blank b:
        handle.write "_:blank\(b)";
    Literal l:
       (handle.write "\"\(asciiEncode l.value)\"";
        if l.language != "" then
            handle.write "@\(l.language)";
        elif l.type != "" then
            handle.write "^^";
            writeContextFreeNode handle (IRI l.type);
        fi)
    esac;

writeNTriple handle triple = // no state needed for NTriples
    for [ (.s), (.p), (.o) ] do sel:
        writeContextFreeNode handle (sel triple);
        handle.write " ";
    done;

hasBlankSubject t = case t.s of Blank _: true; IRI _: false esac;
hasBlankObject t = case t.o of Blank _: true; IRI _: false; Literal _: false esac;

writeAbbreviatedNode state node =
    case node of
    IRI u:
        abbr = state.store.abbreviate node;
        if abbr == u then
            state.handle.write "<\(iriEncode u)>";
        else
            state.handle.write "\(iriEncode abbr)";
        fi;
    Blank b:
        state.handle.write "_:blank\(b)";
    Literal l:
        if l.language != "" then
            state.handle.write "\"\(asciiEncode l.value)\"@\(l.language)";
        elif l.type != "" then
            state.handle.write "\"\(asciiEncode l.value)\"^^";
            writeAbbreviatedNode state (IRI l.type);
        else
            state.handle.write "\"\(asciiEncode l.value)\"";
        fi;
    esac;

var writeTurtleTriples' state triples = ();

writeAnonObject state triple =
   (state.handle.write "[ ";
    anonTriples = state.store.match 
        { s = Known triple.o, p = Wildcard (), o = Wildcard () };
    writeTurtleTriples' 
        (state with { subject = Some triple.o, predicate = None () })
        anonTriples;
    state.handle.write "] ");

writeTurtleNodes state selectors triple =
   (state.handle.write (strPad " " state.indent "");
    nSelectors =
        if state.isAnon then (length selectors) - 1
        else length selectors
        fi;
    for (take nSelectors selectors) do sel:
        writeAbbreviatedNode state (sel triple);
        state.handle.write " ";
    done;
    if state.isAnon then
        writeAnonObject state triple
    fi);

isBlankObjectUnique state triple =
    empty?
       (filter (!= triple)
           (state.store.match 
                { s = Wildcard (), p = Wildcard (), o = Known triple.o }));

writeUnterminatedTriple state triple =
    writeTurtleNodes state [ (.s), (.p), (.o) ] triple;

writeTurtleCollection state triple = false;

writeNonCollectionTriple state triple =
   (case state.subject of
    None ():
        // first triple in graph
        writeUnterminatedTriple state triple;
    Some sn:
        if sn == triple.s then
            case state.predicate of
            None (): 
                // first triple in bnode [] syntax
                writeTurtleNodes 
                    (state with { indent = 0 }) [ (.p), (.o) ] triple;
            Some pn:
                if pn == triple.p then
                    state.handle.write ", ";
                    writeTurtleNodes
                        (state with { indent = 8 }) [ (.o) ] triple;
                else
                    state.handle.write ";\n";
                    writeTurtleNodes 
                        (state with { indent = 4 }) [ (.p), (.o) ] triple;
                fi;
            esac;
        else
            state.handle.write ".\n\n";
            writeUnterminatedTriple state triple;
        fi
    esac;
    state with { subject = Some triple.s, predicate = Some triple.p });

writeTurtleTriple state triple =
   (isAnon = (hasBlankObject triple and isBlankObjectUnique state triple);
    isCollection = (isAnon and (triple.o == rdfFirstIRI or triple.o == rdfRestIRI));
    if isCollection and (writeTurtleCollection state triple) then
        state
    else
        writeNonCollectionTriple (state with { isAnon }) triple
    fi);

writeTurtleTripleMaybe state triple =
    if not state.written[triple] then
        state.written[triple] := true;
        writeTurtleTriple state triple;
    else
        state
    fi;

writePrefixes handle store =
    for (store.prefixes ()) do pfx:
        case store.expand (pfx ^ ":") of
        IRI iri: 
            handle.write "@prefix \(pfx): <\(iri)> .\n"
        esac
    done;

writeTurtleTriples state triples =
   \() (fold writeTurtleTripleMaybe state triples);

writeTurtleTriples' := writeTurtleTriples;

sortByIri = sortBy
    do t1 t2:
        case t1.s of
        IRI i1:
            case t2.s of
            IRI i2: i1 < i2;
             _: true;
            esac;
         _: false;
        esac;
    done;

writeNTriplesToHandle handle store =
    for (store.enumerate ()) do t:
        writeNTriple handle t;
        handle.write ".\n";
    done;

//!!! need base
writeNTriplesToFile filename store =
    writeNTriplesToHandle (openOutFile filename "US-ASCII") store;

writeTurtleToHandle handle store =
   (writePrefixes handle store;
    handle.write "\n";
    tt = store.enumerate ();
    written = mapIntoHash id \(false) tt;
    ordered = // iri-subject triples first, then blank-subject triples
        sortByIri (filter do t: not hasBlankSubject t done tt)
        ++
        filter hasBlankSubject tt;
    writeTurtleTriples {
        handle,
        subject = None (),
        predicate = None (),
        indent = 0,
        isAnon = false,
        store,
        written
    } ordered;
    if not (empty? ordered) then
        handle.write ".";
    fi;
    handle.write "\n";
    handle.close ());

//!!! need base
writeTurtleToFile filename store =
    writeTurtleToHandle (openOutFile filename "UTF-8") store;

{
  writeNTriplesToHandle,
  writeNTriplesToFile,
  writeTurtleToHandle,
  writeTurtleToFile
}
