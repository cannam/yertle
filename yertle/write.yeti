/*
    Yertle
    RDF/Turtle serialiser module

    Copyright (c) 2013 Chris Cannam
    Copyright (c) 2013 Queen Mary, University of London
  
    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use, copy,
    modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR
    ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
    CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

    Except as contained in this notice, the names of the Centre for
    Digital Music; Queen Mary, University of London; and Chris Cannam
    shall not be used in advertising or otherwise to promote the sale,
    use or other dealings in this Software without prior written
    authorization.
*/

module yertle.write;

/*
   Currently this writes N-Triples only.
*/

store = load yertle.store;

import java.lang: Character;

asciiEncode text =
   (encode c = 
        case c of 
        "\t": "\\t";
        "\n": "\\n";
        "\r": "\\r";
        "\"": "\\\"";
        "\\": "\\\\";
           _:
           (s = Integer#toHexString(Character#codePointAt(c is string, 0));
            u = if (strLength s) < 5 then "u" else "U" fi;
            n = if (strLength s) < 5 then 4 else 8 fi;
            "\\\(u)" ^ (strPad "0" (n - strLength s) "") ^ (strUpper s))
        esac;
    strJoin ""
       (map
        \case of
         Ascii t: t;
         NotAscii [c]: encode c;
         _: ""
         esac (matchAll "[^\\x20-\\x21\\x23-\\x5b\\x5d-\\x7e]"
                   NotAscii Ascii text))
    );

writeNode handle node =
    case node of
    IRI u:
        handle.write "<\(asciiEncode u)>";
    Blank b:
        handle.write "_:blank\(b)";
    Literal l:
       (handle.write "\"\(asciiEncode l.value)\"";
        if l.language != "" then
            handle.write "@\(l.language)";
        elif l.type != "" then
            handle.write "^^";
            writeNode handle (IRI l.type);
        fi)
    esac;

writeUnterminated handle indent selectors triple =
   (handle.write (strPad " " indent "");
    for selectors do sel:
        writeNode handle (sel triple);
        handle.write " ";
    done);

writeUnterminatedTriple handle indent triple =
    writeUnterminated handle indent [ (.s), (.p), (.o) ] triple;

writeTurtleTriple handle state triple =
   (case state.subject of
    None (): writeUnterminatedTriple handle 0 triple;
    Some sn:
        if sn == triple.s then
            case state.predicate of
            None (): throw new Exception
                         ("Previous triple had subject but no predicate?!");
            Some pn:
                if pn == triple.p then
                    handle.write ",\n";
                    writeUnterminated handle 8 [ (.o) ] triple;
                else
                    handle.write ";\n";
                    writeUnterminated handle 4 [ (.p), (.o) ] triple;
                fi;
            esac;
        else
            handle.write ".\n\n";
            writeUnterminatedTriple handle 0 triple;
        fi
    esac;
    state with { subject = Some triple.s, predicate = Some triple.p });

writeNTriplesToHandle handle st =
    for (store.enumerate st) do t:
        writeUnterminatedTriple handle 0 t;
        handle.write ".\n";
    done;

writeTurtleToHandle handle st =
   \() (fold
            (writeTurtleTriple handle)
            { subject = None (), predicate = None (), indent = 0 }
            (store.enumerate st));

{ writeNTriplesToHandle, writeTurtleToHandle }
