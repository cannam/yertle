
module index;

typedef statement = {
   s is URI string | Blank number,
   p is URI string,
   o is URI string | Blank number | Literal { value is string, type is string },
};

typedef pattern = {
   s is Wildcard () | URI string | Blank number,
   p is Wildcard () | URI string,
   o is Wildcard () | URI string | Blank number | Literal { value is string, type is string },
};

typedef indextree = hash<'a, Sub 'b | Entry 'c>;

typedef index = { order is 'a, tree is indextree };

newIndex type = {
    order =
    case type of 
       SPO (): [ (.s), (.p), (.o) ]; // list of selectors must be exhaustive for the statement structure
       POS (): [ (.p), (.o), (.s) ];
       OPS (): [ (.o), (.p), (.s) ];
       Other o: o;
    esac,
    tree = [:];
};

add ix stmt is index -> statement -> boolean =
    case ix.order of
    selector::rest:
        node = selector stmt;
        if not node in ix.tree then 
            if empty? rest then 
                ix.tree[node] := Entry stmt;
                true;
            else
                sub = [:];
                ix.tree[node] := Sub sub;
                add { order = rest, tree = sub } stmt;
            fi;
        else
            case ix.tree[node] of
                Sub sub: add { order = rest, tree = sub } stmt;
                Entry s: empty? rest and s == stmt;
            esac;
        fi;
    _: false;
    esac;

remove ix stmt is index -> statement -> boolean =
    case ix.order of
    selector::rest:
        node = selector stmt;
        if not node in ix.tree then false 
        else
            case ix.tree[node] of
                Sub sub: remove { order = rest, tree = sub } stmt;
                Entry s: empty? rest and (delete ix.tree node; true);
            esac;
        fi;
    _: false;
    esac;

enumerate ix is index -> list<'a> =
    concat
       (map do k:
            case ix.tree[k] of
            Sub sub: enumerate { tree = sub };
            Entry e: [e];
            esac
        done (keys ix.tree));

match ix pat is index -> pattern -> list<statement> =
    concat
       (case ix.order of
        selector::rest:
            node = selector pat;
            matching = case node of
                       Wildcard _: keys ix.tree;
                       _: if node in ix.tree then [node] else [] fi;
                       esac;
            map do m:
                case ix.tree[m] of
                Sub sub: match { order = rest, tree = sub } pat;
                Entry e: [e];
                esac
            done matching;
        _: [];
        esac);

contains ix stmt is index -> statement -> boolean =
    not empty? (match ix stmt);

{ newIndex, add, remove, enumerate, contains, match }


