/*
    Yertle
    Simple RDF store

    Copyright (c) 2013-2014 Chris Cannam
    Copyright (c) 2013-2014 Queen Mary, University of London
  
    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use, copy,
    modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR
    ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
    CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

    Except as contained in this notice, the names of the Centre for
    Digital Music; Queen Mary, University of London; and Chris Cannam
    shall not be used in advertising or otherwise to promote the sale,
    use or other dealings in this Software without prior written
    authorization.
*/

module yertle.property;

load yertle.types;

// Simple lookup of property values given a store, a subject node, and
// a predicate name (to be prefix-expanded).

textsProperty store subject name =
    concatMap do r:
        case r of
        { o = Literal { value = text } }: [ text ];
        { o = _ }: [];
        _: [];
        esac;
    done
       (store.match {
            s = Known subject, p = Known (store.expand name), o = Wildcard ()
        });

textProperty store subject name =
    case textsProperty store subject name of
    first::_: first;
    _: "";
    esac;

irisProperty store subject name =
    concatMap do r:
        case r of
        { o = IRI iri }: [ IRI iri ];
        { o = _ }: [];
        _: [];
        esac;
    done
       (store.match {
            s = Known subject, p = Known (store.expand name), o = Wildcard ()
        });

iriProperty store subject name =
    case irisProperty store subject name of
    first::_: first;
    _: None ();
    esac;

nodesProperty store subject name =
    concatMap do r:
        case r of 
        { o = IRI iri }: [ IRI iri ];
        { o = Blank n }: [ Blank n ];
        { o = _ }: [];
        _: []
        esac
    done 
       (store.match {
            s = Known subject, p = Known (store.expand name), o = Wildcard ()
        });

nodeProperty store subject name =
    case nodesProperty store subject name of
    first::_: Some first;
    _: None ();
    esac;

typedef maybe_iri = IRI string | None ();
typedef maybe_node = Some node | None ();

{
    textProperty is store -> node -> string -> string,
    textsProperty is store -> node -> string -> list<string>,
    iriProperty is store -> node -> string -> maybe_iri, 
    irisProperty is store -> node -> string -> list<iri>, 
    nodeProperty is store -> node -> string -> maybe_node,
    nodesProperty is store -> node -> string -> list<node>,
}
