
Yertle
======

Simple RDF store and RDF/Turtle parser in Yeti
----------------------------------------------

Yertle is a simple in-memory RDF datastore and RDF/Turtle
parser/serialiser written in Yeti (http://mth.github.com/yeti/)
without additional library dependencies.


Target
------

The aim is for Yertle to provide:

 * A 100% spec-compliant RDF/Turtle parser.

   This means the final W3C Turtle spec -- in my opinion the W3C have
   overcomplicated the Turtle language since its original submission,
   but by now it's probably inevitable that a new implementation
   should follow the W3C version rather than "classic" Turtle.

 * An RDF/Turtle serialiser.

 * A simple single-graph datastore capable of doing reasonably quick
   indexed lookups (but not SPARQL queries) for use in programs with
   fairly simple RDF requirements.

 * Tolerable read/write performance -- optimistically aiming for
   within a factor of 5 of current C implementations.


Current status
--------------

 * The parser passes all 159 current W3C spec tests at the time of
   writing, see:

   http://www.w3.org/2011/rdf-wg/wiki/Turtle_Test_Suite,
   https://dvcs.w3.org/hg/rdf/raw-file/default/rdf-turtle/tests-ttl/manifest.ttl

   There are also a few additional tests covering things not covered
   by the spec tests, see test/test_read.yeti.

 * The serialiser may produce valid Turtle, but only by accident. It
   doesn't write blank node [] or container () syntax, can't produce
   numeric or boolean literals in "natural" form, doesn't know about
   base IRIs, and doesn't yet have a test suite.

 * The datastore can store and do indexed retrieval, but it lacks many
   conveniences and the implementation is still in flux.

 * There's no build/package mechanism yet.

To build and run the tests, just run the Yeti compiler (yc) on
test/all.yeti.

This represents both the first time I've written any substantial sort
of parser, and my first attempt at significant data-processing using
Yeti. Having a go at these things was among the reasons I started
writing it. So it's unlikely to represent best practice in either.


Author
------

Chris Cannam, cannam@all-day-breakfast.com
February 2013

